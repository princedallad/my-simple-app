name: CI/CD for Docker Compose App

on:
  push:
    branches: [ main ]

jobs:
  # -----------------------------
  # 1️⃣ Build and test (optional CI phase)
  # -----------------------------
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Compose file
        run: docker compose config

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build and run services for test
        run: |
          docker compose build
          docker compose up -d
          docker ps
          docker compose logs

  # -----------------------------
  # 2️⃣ Deploy (runs on self-hosted runner / Azure VM)
  # -----------------------------
  deploy:
    runs-on: self-hosted
    needs: build-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Create .env file dynamically for production
      - name: Create .env file
        shell: bash
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "MONGO_ADMIN_USER=${{ secrets.MONGO_ADMIN_USER }}" > .env
          echo "MONGO_ADMIN_PASS=${{ secrets.MONGO_ADMIN_PASS }}" >> .env
          echo "IMAGE_TAG=${COMMIT_SHA}" >> .env
          echo "Generated .env file:"
          cat .env

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build, Push, and Deploy the latest container stack
      - name: Build, push, and deploy
        shell: bash
        run: |
          echo "Starting deployment..."
          
          # Export .env variables to current shell session
          set -a
          source .env
          set +a

          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "Using tag: $IMAGE_TAG"

          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

          docker system prune -af
          docker compose build --build-arg IMAGE_TAG=$IMAGE_TAG
          docker compose push
          docker compose down
          docker compose pull
          docker compose up -d
          echo "Deployment completed successfully!"

  # -----------------------------
  # 3️⃣ Cleanup Runner Workspace
  # -----------------------------
  cleanup:
    runs-on: self-hosted
    needs: deploy
    if: always()
    steps:
      - name: Cleanup workspace
        run: |
          echo "Cleaning up runner workspace..."
          cd ~/actions-runner/_work
          rm -rf *
